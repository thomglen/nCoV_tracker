scale_colour_manual(values=c(sars_col)) + scale_x_date(date_labels = "%b", limits=c(sars_min_date,sars_max_date)) +
scale_y_continuous(limits=c(0,10000), labels = function(l) {trans = l / 1000; paste0(trans, "K")}) +
theme(legend.title = element_blank(), legend.position = "", plot.title = element_text(size=10),
plot.margin = margin(5, 5, 5, 5))
}
# function to plot new cases by date
sars_new_cases_plot = function(sars_aggregated, plot_date) {
plot_df_new = subset(sars_aggregated, date<=plot_date)
ggplot(plot_df_new, aes(x = date, y = new)) +
geom_bar(position="stack", stat="identity", fill = sars_col) +
ylab("new cases") + theme_bw() + ylim(0,2000) +
scale_fill_manual(values=c(sars_col)) +
xlim(c(sars_min_date,sars_max_date)) + scale_x_date(date_labels = "%b", limits=c(sars_min_date,sars_max_date)) +
theme(legend.title = element_blank(), legend.position = "", plot.title = element_text(size=10),
plot.margin = margin(5, 5, 5, 5))
}
# function to plot new cases by region
country_cases_plot = function(cv_cases, start_point=c("Date", "Day of 100th confirmed case", "Day of 10th death")) {
if (start_point=="Date") {
g = ggplot(cv_cases, aes(x = date, y = new_outcome, fill = region,
text = paste0(format(date, "%d %B %Y"), "\n", region, ": ",new_outcome))) +
xlim(c(cv_min_date,current_date+1)) +
xlab("Date")
}
if (start_point=="Day of 100th confirmed case") {
cv_cases = subset(cv_cases, days_since_case100>0)
g = ggplot(cv_cases, aes(x = days_since_case100, y = new_outcome, fill = region,
text = paste0("Day ",days_since_case100, "\n", region, ": ",new_outcome)))+
xlab("Days since 100th confirmed case")
}
if (start_point=="Day of 10th death") {
cv_cases = subset(cv_cases, days_since_death10>0)
g = ggplot(cv_cases, aes(x = days_since_death10, y = new_outcome, fill = region,
text = paste0("Day ",days_since_death10, "\n", region, ": ",new_outcome))) +
xlab("Days since 10th death")
}
g1 = g +
geom_bar(position="stack", stat="identity") +
ylab("new") + theme_bw() +
scale_fill_manual(values=country_cols) +
theme(legend.title = element_blank(), legend.position = "", plot.title = element_text(size=10))
ggplotly(g1, tooltip = c("text")) %>% layout(legend = list(font = list(size=11)))
}
# function to plot cumulative cases by region
country_cases_cumulative = function(cv_cases, start_point=c("Date", "Day of 100th confirmed case", "Day of 10th death")) {
if (start_point=="Date") {
g = ggplot(cv_cases, aes(x = date, y = outcome, colour = region, group = 1,
text = paste0(format(date, "%d %B %Y"), "\n", region, ": ",outcome))) +
xlim(c(cv_min_date,current_date+1)) + xlab("Date")
}
if (start_point=="Day of 100th confirmed case") {
cv_cases = subset(cv_cases, days_since_case100>0)
g = ggplot(cv_cases, aes(x = days_since_case100, y = outcome, colour = region, group = 1,
text = paste0("Day ", days_since_case100,"\n", region, ": ",outcome))) +
xlab("Days since 100th confirmed case")
}
if (start_point=="Day of 10th death") {
cv_cases = subset(cv_cases, days_since_death10>0)
g = ggplot(cv_cases, aes(x = days_since_death10, y = outcome, colour = region, group = 1,
text = paste0("Day ", days_since_death10,"\n", region, ": ",outcome))) +
xlab("Days since 10th death")
}
g1 = g + geom_line(alpha=0.8) + geom_point(size = 1, alpha = 0.8) +
ylab("cumulative") + theme_bw() +
scale_colour_manual(values=country_cols) +
theme(legend.title = element_blank(), legend.position = "", plot.title = element_text(size=10))
ggplotly(g1, tooltip = c("text")) %>% layout(legend = list(font = list(size=11)))
}
# function to plot cumulative cases by region on log10 scale
country_cases_cumulative_log = function(cv_cases, start_point=c("Date", "Day of 100th confirmed case", "Day of 10th death"))  {
if (start_point=="Date") {
g = ggplot(cv_cases, aes(x = date, y = outcome, colour = region, group = 1,
text = paste0(format(date, "%d %B %Y"), "\n", region, ": ",outcome))) +
xlim(c(cv_min_date,current_date+1)) +
xlab("Date")
}
if (start_point=="Day of 100th confirmed case") {
cv_cases = subset(cv_cases, days_since_case100>0)
g = ggplot(cv_cases, aes(x = days_since_case100, y = outcome, colour = region, group = 1,
text = paste0("Day ",days_since_case100, "\n", region, ": ",outcome))) +
xlab("Days since 100th confirmed case")
}
if (start_point=="Day of 10th death") {
cv_cases = subset(cv_cases, days_since_death10>0)
g = ggplot(cv_cases, aes(x = days_since_death10, y = outcome, colour = region, group = 1,
text = paste0("Day ",days_since_death10, "\n", region, ": ",outcome))) +
xlab("Days since 10th death")
}
g1 = g + geom_line(alpha=0.8) + geom_point(size = 1, alpha = 0.8) +
ylab("cumulative (log10)") + theme_bw() +
scale_y_continuous(trans="log10") +
scale_colour_manual(values=country_cols) +
theme(legend.title = element_blank(), legend.position = "", plot.title = element_text(size=10))
ggplotly(g1, tooltip = c("text")) %>% layout(legend = list(font = list(size=11)))
}
# function to plot new cases by state
state_cases_plot = function(cv_cases_USstates, start_point=c("Date", "Day of 100th confirmed case", "Day of 10th death")) {
if (start_point=="Date") {
g = ggplot(cv_cases_USstates, aes(x = date, y = new_outcome, fill = region, #order = region,
text = paste0(format(date, "%d %B %Y"), "\n", region, ": ",new_outcome))) +
xlim(c(cv_min_date_states,current_date_states+1)) +
xlab("Date")
}
if (start_point=="Day of 100th confirmed case") {
cv_cases_USstates = subset(cv_cases_USstates, days_since_case100>0)
#region = region[1:length(cv_cases_USstates$new_outcome)]
g = ggplot(cv_cases_USstates, aes(x = days_since_case100, y = new_outcome, fill = region,
text = paste0("Day ",days_since_case100, "\n", region, ": ",new_outcome)))+
xlab("Days since 100th confirmed case")
}
if (start_point=="Day of 10th death") {
cv_cases_USstates = subset(cv_cases_USstates, days_since_death10>0)
g = ggplot(cv_cases_USstates, aes(x = days_since_death10, y = new_outcome, fill = region,
text = paste0("Day ",days_since_death10, "\n", region, ": ",new_outcome))) +
xlab("Days since 10th death")
}
g1 = g +
geom_bar(position="stack", stat="identity") +
ylab("new") + theme_bw() +
#    scale_y_continuous(trans="log10") +
scale_fill_manual(values=state_cols) +
theme(legend.title = element_blank(), legend.position = "", plot.title = element_text(size=10))
ggplotly(g1, tooltip = c("text")) %>% layout(legend = list(font = list(size=11)))
}
# function to plot new cases by county
county_cases_plot = function(cv_cases, start_point=c("Date", "Day of 100th confirmed case", "Day of 10th death")) {
if (start_point=="Date") {
g = ggplot(cv_cases, aes(x = date, y = new_outcome, fill = region, #order = region,
text = paste0(format(date, "%d %B %Y"), "\n", region, ": ",new_outcome))) +
xlim(c(cv_min_date_counties,current_date_counties+1)) +
xlab("Date")
}
if (start_point=="Day of 100th confirmed case") {
cv_cases = subset(cv_cases, days_since_case100>0)
g = ggplot(cv_cases, aes(x = days_since_case100, y = new_outcome, fill = region,
text = paste0("Day ",days_since_case100, "\n", region, ": ",new_outcome)))+
xlab("Days since 100th confirmed case")
}
if (start_point=="Day of 10th death") {
cv_cases = subset(cv_cases, days_since_death10>0)
g = ggplot(cv_cases, aes(x = days_since_death10, y = new_outcome, fill = region,
text = paste0("Day ",days_since_death10, "\n", region, ": ",new_outcome))) +
xlab("Days since 10th death")
}
g1 = g +
geom_bar(position="stack", stat="identity") +
ylab("new") + theme_bw() +
#    scale_y_continuous(trans="log10") +
scale_fill_manual(values=county_cols) +
theme(legend.title = element_blank(), legend.position = "", plot.title = element_text(size=10))
ggplotly(g1, tooltip = c("text")) %>% layout(legend = list(font = list(size=11)))
}
# function to bar plot new_outcome by region
region_cases_bar_plot = function(cv_cases, start_point=c("Date", "Day of 100th confirmed case", "Day of 10th death"), graph_start_date, log_flag = FALSE, ylabel = "Outcome") {
#to align x-axis labeles and x-axis data
#something related to: https://stackoverflow.com/questions/42973629/ggplot-date-scales-shifts-one-month-forward
#another lead could be vjust, but not as likely: #theme(axis.text.x.top = element_text(vjust = 0.5))
# offset = 7 #may need to be a different number if x-axis ticks are different from 1 week
offset = 0 #may need to be a different number to overcome bug in plot axes tick mark labeling
if (start_point=="Date") {
g = ggplot(cv_cases, aes(x = date+offset, y = new_outcome, fill = region, #order = region,
text = paste0(format(date, "%d %B %Y"), "\n", region, ": ",new_outcome))) +
xlim(c(graph_start_date+offset,current_date+1+offset)) +
xlab("Date")
}
if (start_point=="Day of 100th confirmed case") {
cv_cases = subset( cv_cases, days_since_case100>0)
#region = region[1:length( cv_cases$new_outcome)]
g = ggplot(cv_cases, aes(x = days_since_case100, y = new_outcome, fill = region,
text = paste0("Day ",days_since_case100, "\n", region, ": ",new_outcome)))+
xlab("Days since 100th confirmed case")
}
if (start_point=="Day of 10th death") {
cv_cases = subset( cv_cases, days_since_death10>0)
g = ggplot(cv_cases, aes(x = days_since_death10, y = new_outcome, fill = region,
text = paste0("Day ",days_since_death10, "\n", region, ": ",new_outcome))) +
xlab("Days since 10th death")
}
cols = cv_cases$color.hex
names(cols) <- cv_cases$region
g1 = g +
geom_bar(position="stack", stat="identity") +
ylab(ylabel) + theme_bw() +
scale_fill_manual(values=cols) +
theme(legend.title = element_blank(), legend.position = "", plot.title = element_text(size=10))
if (log_flag == TRUE || log_flag == "On") {g1 = g1 + scale_y_continuous(trans="log10")}
ggplotly(g1, tooltip = c("text")) %>% layout(legend = list(font = list(size=11)))
}
# function to line plot outcome by region
region_cases_line_plot = function(cv_cases, start_point=c("Date", "Day of 100th confirmed case", "Day of 10th death"), graph_start_date, log_flag = FALSE, ylabel = "Outcome") {
#to align x-axis labeles and x-axis data
#something related to: https://stackoverflow.com/questions/42973629/ggplot-date-scales-shifts-one-month-forward
#another lead could be vjust, but not as likely: #theme(axis.text.x.top = element_text(vjust = 0.5))
offset = 7 #may need to be a different number if x-axis ticks are different from 1 week
if (start_point=="Date") {
g = ggplot(cv_cases, aes(x = date+offset, y = outcome, group = region, fill = region, #order = region,
text = paste0(format(date, "%d %B %Y"), "\n", region, ": ",outcome))) +
xlim(c(graph_start_date+offset,current_date+1+offset)) +
xlab("Date")
}
#print(start_point)
#print(cv_min_date)
#print(current_date+1)
if (start_point=="Day of 100th confirmed case") {
cv_cases = subset( cv_cases, days_since_case100>0)
#region = region[1:length( cv_cases$outcome)]
g = ggplot(cv_cases, aes(x = days_since_case100, y = outcome, group = region, fill = region,
text = paste0("Day ",days_since_case100, "\n", region, ": ",outcome)))+
xlab("Days since 100th confirmed case")
}
if (start_point=="Day of 10th death") {
cv_cases = subset( cv_cases, days_since_death10>0)
g = ggplot(cv_cases, aes(x = days_since_death10, y = outcome, group = region, fill = region,
text = paste0("Day ",days_since_death10, "\n", region, ": ",outcome))) +
xlab("Days since 10th death")
}
cols = cv_cases$color.hex
names(cols) <- cv_cases$region
g1 = g +
#geom_bar(position="stack", stat="identity") +
geom_line(aes(color=region)) +
geom_point(size=0.5, shape=20, aes(color=region)) +
ylab(ylabel) + theme_bw() +
scale_fill_manual(values=cols) +
scale_color_manual(values=cols) +
theme(legend.title = element_blank(), legend.position = "", plot.title = element_text(size=10))
if (log_flag == TRUE || log_flag == "On") {g1 = g1 + scale_y_continuous(trans="log10")}
ggplotly(g1, tooltip = c("text")) %>% layout(legend = list(font = list(size=11)))
}
#ethow region_cases_line_plot_new
# function to line plot new_outcome by region, i.e., new cases or new deaths
region_cases_line_plot_new = function(cv_cases, start_point=c("Date", "Day of 100th confirmed case", "Day of 10th death"), graph_start_date, log_flag = FALSE, ylabel = "New Outcomes") {
#to align x-axis labeles and x-axis data
#something related to: https://stackoverflow.com/questions/42973629/ggplot-date-scales-shifts-one-month-forward
#another lead could be vjust, but not as likely: #theme(axis.text.x.top = element_text(vjust = 0.5))
offset = 7 #may need to be a different number if x-axis ticks are different from 1 week
if (start_point=="Date") {
g = ggplot(cv_cases, aes(x = date+offset, y = new_outcome, group = region, fill = region, #order = region,
text = paste0(format(date, "%d %B %Y"), "\n", region, ": ",new_outcome))) +
xlim(c(graph_start_date+offset,current_date+1+offset)) +
xlab("Date")
}
#print(start_point)
#print(cv_min_date)
#print(current_date+1)
if (start_point=="Day of 100th confirmed case") {
cv_cases = subset( cv_cases, days_since_case100>0)
#region = region[1:length( cv_cases$new_outcome)]
g = ggplot(cv_cases, aes(x = days_since_case100, y = new_outcome, group = region, fill = region,
text = paste0("Day ",days_since_case100, "\n", region, ": ",new_outcome)))+
xlab("Days since 100th confirmed case")
}
if (start_point=="Day of 10th death") {
cv_cases = subset( cv_cases, days_since_death10>0)
g = ggplot(cv_cases, aes(x = days_since_death10, y = new_outcome, group = region, fill = region,
text = paste0("Day ",days_since_death10, "\n", region, ": ",new_outcome))) +
xlab("Days since 10th death")
}
cols = cv_cases$color.hex
names(cols) <- cv_cases$region
g1 = g +
#geom_bar(position="stack", stat="identity") +
geom_line(aes(color=region)) +
geom_point(size=0.5, shape=20, aes(color=region)) +
ylab(ylabel) + theme_bw() +
scale_fill_manual(values=cols) +
scale_color_manual(values=cols) +
theme(legend.title = element_blank(), legend.position = "", plot.title = element_text(size=10))
if (log_flag == TRUE || log_flag == "On") {g1 = g1 + scale_y_continuous(trans="log10")}
ggplotly(g1, tooltip = c("text")) %>% layout(legend = list(font = list(size=11)))
}
# function to render plotly of epidemic comparison depending on selected outcome
comparison_plot = function(epi_comp, comparison) {
epi_comp$outcome = epi_comp[,comparison]
epi_comp = epi_comp[order(epi_comp$outcome),]
epi_comp$outbreak = factor(epi_comp$outbreak, levels=epi_comp$outbreak)
p1 <- ggplot(epi_comp, aes(x = outbreak, y = outcome, fill=outbreak, text = paste0(outbreak, ": ",outcome))) + geom_bar(alpha = 0.8, stat="identity") +
ylab("N") + xlab("") + theme_bw() +
scale_fill_manual(values=c("2019-COVID"=covid_col, "2003-SARS"=sars_col, "2014-Ebola"=ebola_col,"2009-H1N1 (swine flu)"=h1n1_col)) +
theme(legend.position = "")
if(comparison == "cfr") { p1 = p1 + ylab("%") }
if(comparison == "deaths") { p1 = p1 + scale_y_continuous(labels = function(l) {trans = l / 1000; paste0(trans, "K")}) }
if(comparison == "cases") { p1 = p1 + scale_y_continuous(trans='log10', limits = c(1,1e8), breaks=c(1,1000,1e6,1e9), labels = function(l) {trans = l / 1000; paste0(trans, "K")}) }
ggplotly(p1 + coord_flip(), tooltip = c("text")) %>% layout(showlegend = FALSE)
}
# extract time stamp from cv_cases
update = tail(cv_cases$last_update,1)
# check consistency of country names across datasets
if (all(unique(cv_cases$country) %in% unique(countries$country))==FALSE) { print("Error: inconsistent country names")}
# extract dates from cv data
if (any(grepl("/", cv_cases$date))) {
cv_cases$date = format(as.Date(cv_cases$date, format="%d/%m/%Y"),"%Y-%m-%d")
} else { cv_cases$date = as.Date(cv_cases$date, format="%Y-%m-%d") }
cv_cases$date = as.Date(cv_cases$date)
cv_min_date = as.Date(min(cv_cases$date),"%Y-%m-%d")
current_date = as.Date(max(cv_cases$date),"%Y-%m-%d")
cv_max_date_clean = format(as.POSIXct(current_date),"%d %B %Y")
# merge cv data with country data and extract key summary variables
cv_cases = merge(cv_cases, countries, by = "country")
cv_cases = cv_cases[order(cv_cases$date),]
cv_cases$per100k = as.numeric(format(round(cv_cases$cases/(cv_cases$population/100000),1),nsmall=1))
cv_cases$newper100k = as.numeric(format(round(cv_cases$new_cases/(cv_cases$population/100000),1),nsmall=1))
cv_cases$deaths_per100k = as.numeric(format(round(cv_cases$deaths/(cv_cases$population/100000),1),nsmall=1))
cv_cases$new_deaths_per100k = as.numeric(format(round(cv_cases$new_deaths/(cv_cases$population/100000),1),nsmall=1))
cv_cases$activeper100k = as.numeric(format(round(cv_cases$active_cases/(cv_cases$population/100000),1),nsmall=1))
cv_cases$million_pop = as.numeric(cv_cases$population>1e6)
# add variable for days since 100th case and 10th death
cv_cases$days_since_case100 = cv_cases$days_since_death10 = 0
for (i in 1:length(unique(cv_cases$country))) {
country_name = as.character(unique(cv_cases$country))[i]
country_db = subset(cv_cases, country==country_name)
country_db$days_since_case100[country_db$cases>=100] = 1:sum(country_db$cases>=100)
country_db$days_since_death10[country_db$deaths>=10] = 1:sum(country_db$deaths>=10)
cv_cases$days_since_case100[cv_cases$country==country_name] = country_db$days_since_case100
cv_cases$days_since_death10[cv_cases$country==country_name] = country_db$days_since_death10
}
# creat variable for today's data
cv_today = subset(cv_cases, date==current_date)
current_case_count = sum(cv_today$cases)
current_case_count_China = sum(cv_today$cases[cv_today$country=="Mainland China"])
current_case_count_other = sum(cv_today$cases[cv_today$country!="Mainland China"])
current_death_count = sum(cv_today$deaths)
# create subset for countries with at least 100 cases
cv_today_100 = subset(cv_today, cases>=100)
cv_today_100 <- cv_today_100[order(-cv_today_100$cases),]
# write current day's data
write.csv(cv_today %>% select(c(country, date, update, cases, new_cases, deaths, new_deaths,
recovered, new_recovered, active_cases,
per100k, newper100k, activeper100k,
days_since_case100, days_since_death10)), "input_data/coronavirus_today.csv")
# aggregate at continent level
cv_cases_continent = subset(cv_cases, !is.na(continent_level)) %>% select(c(cases, new_cases, deaths, new_deaths, date, continent_level)) %>% group_by(continent_level, date) %>% summarise_each(funs(sum)) %>% data.frame()
# add variable for days since 100th case and 10th death
cv_cases_continent$days_since_case100 = cv_cases_continent$days_since_death10 = 0
cv_cases_continent$continent = cv_cases_continent$continent_level
for (i in 1:length(unique(cv_cases_continent$continent))) {
continent_name = as.character(unique(cv_cases_continent$continent))[i]
continent_db = subset(cv_cases_continent, continent==continent_name)
continent_db$days_since_case100[continent_db$cases>=100] = 1:sum(continent_db$cases>=100)
continent_db$days_since_death10[continent_db$deaths>=10] = 1:sum(continent_db$deaths>=10)
cv_cases_continent$days_since_case100[cv_cases_continent$continent==continent_name] = continent_db$days_since_case100
cv_cases_continent$days_since_death10[cv_cases_continent$continent==continent_name] = continent_db$days_since_death10
}
write.csv(cv_cases_continent, "input_data/coronavirus_continent.csv")
# aggregate at global level
cv_cases_global = cv_cases %>% select(c(cases, new_cases, deaths, new_deaths, date, global_level)) %>% group_by(global_level, date) %>% summarise_each(funs(sum)) %>% data.frame()
cv_cases_global$days_since_case100 = cv_cases_global$days_since_death10 = 1:nrow(cv_cases_global)
write.csv(cv_cases_global, "input_data/coronavirus_global.csv")
# select large countries for mapping polygons
cv_large_countries = cv_today %>% filter(alpha3 %in% worldcountry$id)
if (all(cv_large_countries$alpha3 %in% worldcountry$id)==FALSE) { print("Error: inconsistent country names")}
cv_large_countries = cv_large_countries[order(cv_large_countries$alpha3),]
# create plotting parameters for map
bins = c(0,1,10,50,100,500)
cv_pal <- colorBin("Oranges", domain = cv_large_countries$per100k, bins = bins)
plot_map <- worldcountry[worldcountry$id %in% cv_large_countries$alpha3, ]
# creat cv base map
basemap = leaflet(plot_map) %>%
addTiles() %>%
addLayersControl(
position = "bottomright",
overlayGroups = c("2019-COVID (active)", "2019-COVID (new)", "2019-COVID (cumulative)", "2003-SARS", "2009-H1N1 (swine flu)", "2014-Ebola"),
options = layersControlOptions(collapsed = FALSE)) %>%
hideGroup(c("2019-COVID (new)", "2019-COVID (cumulative)", "2003-SARS", "2009-H1N1 (swine flu)", "2014-Ebola"))  %>%
addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(~-100,-50,~80,80) %>%
addLegend("bottomright", pal = cv_pal, values = ~cv_large_countries$per100k,
title = "<small>Active cases per 100,000</small>") #%>%
# sum cv case counts by date
cv_aggregated = aggregate(cv_cases$cases, by=list(Category=cv_cases$date), FUN=sum)
names(cv_aggregated) = c("date", "cases")
# add variable for new cases in last 24 hours
for (i in 1:nrow(cv_aggregated)) {
if (i==1) { cv_aggregated$new[i] = 0 }
if (i>1) { cv_aggregated$new[i] = cv_aggregated$cases[i] - cv_aggregated$cases[i-1] }
}
# add plotting region
cv_aggregated$region = "Global"
cv_aggregated$date = as.Date(cv_aggregated$date,"%Y-%m-%d")
# assign colours to countries to ensure consistency between plots
cls = rep(c(brewer.pal(8,"Dark2"), brewer.pal(10, "Paired"), brewer.pal(12, "Set3"), brewer.pal(8,"Set2"), brewer.pal(9, "Set1"), brewer.pal(8, "Accent"),  brewer.pal(9, "Pastel1"),  brewer.pal(8, "Pastel2")),3)
cls_names = c(as.character(unique(cv_cases$country)), as.character(unique(cv_cases_continent$continent)),"Global")
country_cols = cls[1:length(cls_names)]
names(country_cols) = cls_names
cv_cases$color.hex = country_cols[as.character(cv_cases$country)]
# extract time stamp from cv_cases
#library(lubridate)
#library(dplyr)
dates <- data.frame(
loco = c(as.character(cv_cases_USstates$date))
)
minmax <- dates %>%
# transform to date format with lubridate
mutate(loco = ymd(loco)) %>%
# find min and max
summarise(min = min(loco),
max = max(loco))
update_states <- minmax[1,2]
# check consistency of state names across datasets
if (all(unique(cv_cases_USstates$state) %in% unique(states$state))==FALSE) { print("Error: inconsistent state names")}
# extract dates from cv data
if (any(grepl("/", cv_cases_USstates$date))) {
cv_cases_USstates$date = format(as.Date(cv_cases_USstates$date, format="%d/%m/%Y"),"%Y-%m-%d")
} else { cv_cases_USstates$date = as.Date(cv_cases_USstates$date, format="%Y-%m-%d") }
cv_cases_USstates$date = as.Date(cv_cases_USstates$date)
cv_min_date_states = as.Date(min(cv_cases_USstates$date),"%Y-%m-%d")
current_date_states = as.Date(max(cv_cases_USstates$date),"%Y-%m-%d")
# merge cv data with state data and extract key summary variables
cv_cases_USstates = merge(cv_cases_USstates, states, by = "state")
cv_cases_USstates = cv_cases_USstates[order(cv_cases_USstates$date),]
#cv_cases_USstates$per100k = as.numeric(format(round(cv_cases_USstates$cases/((state_populations[as.character(cv_cases_USstates$state)])/1000),1),nsmall=1))
#moved.down cv_cases_USstates$per100k = as.numeric(cv_cases_USstates$cases * 100000/(state_populations[as.character(cv_cases_USstates$state)]))
#moved.down cv_cases_USstates$deaths_per100k = as.numeric(cv_cases_USstates$deaths * 100000/(state_populations[as.character(cv_cases_USstates$state)]))
#cv_cases_USstates$newper100k = as.numeric(format(round(cv_cases_USstates$new_cases/(state_populations[cv_cases_USstates$state]/100000),1),nsmall=1))
#cv_cases_USstates$activeper100k = as.numeric(format(round(cv_cases_USstates$active_cases/(state_populations[cv_cases_USstates$state]/100000),1),nsmall=1))
cv_cases_USstates$million_pop = as.numeric(state_populations[cv_cases_USstates$state]>1e6)
cv_cases_USstates_orig <- cv_cases_USstates
cv_cases_USstates <- cv_cases_USstates_orig
cv_cases_USstates <- cv_cases_USstates %>%
group_by(state) %>%
arrange(date) %>%
mutate(new_cases = cases - lag(cases, default = first(cases))) %>%
ungroup()
cv_cases_USstates <- cv_cases_USstates %>%
group_by(state) %>%
arrange(date) %>%
mutate(new_deaths = deaths - lag(deaths, default = first(deaths))) %>%
ungroup()
cv_cases_USstates = cv_cases_USstates %>%
group_by(state) %>%
arrange(date) %>%
mutate(new_cases.7 = rollmean(x = new_cases, 7, align = "right", fill = NA)) %>%
ungroup()
cv_cases_USstates = cv_cases_USstates %>%
group_by(state) %>%
arrange(date) %>%
mutate(new_deaths.7 = rollmean(x = new_deaths, 7, align = "right", fill = NA)) %>%
ungroup()
cv_cases_USstates$per100k = as.numeric(cv_cases_USstates$cases * 100000/(state_populations[as.character(cv_cases_USstates$state)]))
cv_cases_USstates$deaths_per100k = as.numeric(cv_cases_USstates$deaths * 100000/(state_populations[as.character(cv_cases_USstates$state)]))
cv_cases_USstates$new_per100k = as.numeric(cv_cases_USstates$new_cases * 100000/(state_populations[as.character(cv_cases_USstates$state)]))
cv_cases_USstates$new_deaths_per100k = as.numeric(cv_cases_USstates$new_deaths * 100000/(state_populations[as.character(cv_cases_USstates$state)]))
cv_cases_USstates$new.7_per100k = as.numeric(cv_cases_USstates$new_cases.7 * 100000/(state_populations[as.character(cv_cases_USstates$state)]))
cv_cases_USstates$new_deaths.7_per100k = as.numeric(cv_cases_USstates$new_deaths.7 * 100000/(state_populations[as.character(cv_cases_USstates$state)]))
cv_cases_USstates_subset <- cv_cases_USstates
# add variable for days since 100th case and 10th death
cv_cases_USstates$days_since_case100 = cv_cases_USstates$days_since_death10 = 0
for (i in 1:length(unique(cv_cases_USstates$state))) {
state_name = as.character(unique(cv_cases_USstates$state))[i]
state_db = subset(cv_cases_USstates, state==state_name)
state_db$days_since_case100[state_db$cases>=100] = 1:sum(state_db$cases>=100)
state_db$days_since_death10[state_db$deaths>=10] = 1:sum(state_db$deaths>=10)
cv_cases_USstates$days_since_case100[cv_cases_USstates$state==state_name] = state_db$days_since_case100
cv_cases_USstates$days_since_death10[cv_cases_USstates$state==state_name] = state_db$days_since_death10
}
# creat variable for today's data
cv_today_USstates = subset(cv_cases_USstates, date==current_date_states)
current_case_count_USstates = sum(cv_today_USstates$cases)
current_case_count_USstates_NewYork = sum(cv_today_USstates$cases[cv_today_USstates$state=="New York"])
current_case_count_USstates_other = sum(cv_today_USstates$cases[cv_today_USstates$state!="New York"])
current_death_count_USstates = sum(cv_today_USstates$deaths)
# create subset for states with at least N cases
cv_today_USstates_N = subset(cv_today_USstates, cases>=20)
cv_today_USstates_N <- cv_today_USstates_N[order(-cv_today_USstates_N$cases),]
# write current day's data
write.csv(cv_today_USstates %>% select(c(state, date, cases, deaths,
per100k,
days_since_case100, days_since_death10)), "input_data/coronavirus_today_state.csv")
# assign colours to states to ensure consistency between plots
cls = rep(c(brewer.pal(8,"Dark2"), brewer.pal(10, "Paired"), brewer.pal(12, "Set3"), brewer.pal(8,"Set2"), brewer.pal(9, "Set1"), brewer.pal(8, "Accent"),  brewer.pal(9, "Pastel1"),  brewer.pal(8, "Pastel2")),3)
cls_names1 = c(as.character(unique(cv_cases_USstates$state))) #, as.character(unique(cv_cases_continent$continent)),"Global")
state_cols1 = cls[1:length(cls_names1)]
names(state_cols1) = cls_names1
state_cols <- state_cols1
cv_cases_USstates$color.hex = state_cols[as.character(cv_cases_USstates$state)]
# ------- order states by current number of cases -------------
cv_cases_USstates_current <- subset(cv_cases_USstates, date == update_states)
case_order_USstates <- order(cv_cases_USstates_current$cases, decreasing = FALSE)
case_order_USstates_string <- str_pad(order(cv_cases_USstates_current$cases, decreasing = FALSE), 2, pad = "0")
#hash - foo
state2order = c(1:length(state_populations_orig$state))
state2order_string <- str_pad(state2order, 2, pad = "0")
names(state2order_string) <- cv_cases_USstates_current$state[case_order_USstates]
cv_cases_USstates$state.ordered = paste(state2order_string[as.character(cv_cases_USstates$state)], cv_cases_USstates$state, sep = " ")
state.ordered2state = cv_cases_USstates_current$state
names(state.ordered2state) <- paste(state2order_string[as.character(state.ordered2state)], state.ordered2state, sep = " ")
state2state.ordered = names(state.ordered2state)
names(state2state.ordered) <- cv_cases_USstates_current$state
cls_names2 = c(state2state.ordered[as.character(unique(cv_cases_USstates$state))]) #, as.character(unique(cv_cases_continent$continent)),"Global")
state_cols2 = cls[1:length(cls_names2)]
names(state_cols2) = cls_names2
# ------- order states by current number of cases per capita -------------
#cv_cases_USstates_current <- subset(cv_cases_USstates, date == update_states)
case_order_USstates.per100k <- order(cv_cases_USstates_current$per100k, decreasing = FALSE)
case_order_USstates.per100k_string <- str_pad(order(cv_cases_USstates_current$per100k, decreasing = FALSE), 2, pad = "0")
#hash - foo
state2order.per100k = c(1:length(state_populations_orig$state))
#state2order.per100k = c(1:length(states))
state2order.per100k_string <- str_pad(state2order.per100k, 2, pad = "0")
names(state2order.per100k_string) <- cv_cases_USstates_current$state[case_order_USstates.per100k]
cv_cases_USstates$state.per100k.ordered = paste(state2order.per100k_string[as.character(cv_cases_USstates$state)], cv_cases_USstates$state, sep = " ")
state.ordered.per100k2state = cv_cases_USstates_current$state
names(state.ordered.per100k2state) <- paste(state2order.per100k_string[as.character(state.ordered.per100k2state)], state.ordered.per100k2state, sep = " ")
state2state.ordered.per100k = names(state.ordered.per100k2state)
names(state2state.ordered.per100k) <- cv_cases_USstates_current$state
cls_names3 = c(state2state.ordered.per100k[as.character(unique(cv_cases_USstates$state))]) #, as.character(unique(cv_cases_continent$continent)),"Global")
state_cols3 = cls[1:length(cls_names3)]
names(state_cols3) = cls_names3
View(cv_today_USstates)
write.table(cv_today_USstates, File = "a.xls")
write.table(cv_today_USstates, file = "a.xls")
shiny::runApp()
